/****************************************************************************
** Meta object code from reading C++ file 'treetests.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.4.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'treetests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.4.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_TreeTests_t {
    QByteArrayData data[21];
    char stringdata[561];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TreeTests_t, stringdata) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TreeTests_t qt_meta_stringdata_TreeTests = {
    {
QT_MOC_LITERAL(0, 0, 9), // "TreeTests"
QT_MOC_LITERAL(1, 10, 19), // "IntegerTreeCreation"
QT_MOC_LITERAL(2, 30, 0), // ""
QT_MOC_LITERAL(3, 31, 18), // "StringTreeCreation"
QT_MOC_LITERAL(4, 50, 8), // "TreeSize"
QT_MOC_LITERAL(5, 59, 11), // "SubTreeSize"
QT_MOC_LITERAL(6, 71, 13), // "GetFirstChild"
QT_MOC_LITERAL(7, 85, 12), // "GetLastChild"
QT_MOC_LITERAL(8, 98, 14), // "CountLeafNodes"
QT_MOC_LITERAL(9, 113, 35), // "PreOrderTraversalOfSimpleBina..."
QT_MOC_LITERAL(10, 149, 49), // "PreOrderTraversalOfSimpleBina..."
QT_MOC_LITERAL(11, 199, 36), // "PostOrderTraversalOfSimpleBin..."
QT_MOC_LITERAL(12, 236, 44), // "PostOrderTraversalOfLeftDegen..."
QT_MOC_LITERAL(13, 281, 45), // "PostOrderTraversalOfRightDege..."
QT_MOC_LITERAL(14, 327, 32), // "PostOrderTraversalFromEndToBegin"
QT_MOC_LITERAL(15, 360, 43), // "ReversePostOrderTraversalOfSi..."
QT_MOC_LITERAL(16, 404, 38), // "PostOrderTraversalForwardsAnd..."
QT_MOC_LITERAL(17, 443, 16), // "SiblingTraversal"
QT_MOC_LITERAL(18, 460, 31), // "LeafTraversalOfSimpleBinaryTree"
QT_MOC_LITERAL(19, 492, 45), // "LeafTraversalOfSimpleBinaryTr..."
QT_MOC_LITERAL(20, 538, 22) // "SortingATreeOfIntegers"

    },
    "TreeTests\0IntegerTreeCreation\0\0"
    "StringTreeCreation\0TreeSize\0SubTreeSize\0"
    "GetFirstChild\0GetLastChild\0CountLeafNodes\0"
    "PreOrderTraversalOfSimpleBinaryTree\0"
    "PreOrderTraversalOfSimpleBinaryTreeFromEndToBegin\0"
    "PostOrderTraversalOfSimpleBinaryTree\0"
    "PostOrderTraversalOfLeftDegenerateBinaryTree\0"
    "PostOrderTraversalOfRightDegenerateBinaryTree\0"
    "PostOrderTraversalFromEndToBegin\0"
    "ReversePostOrderTraversalOfSimpleBinaryTree\0"
    "PostOrderTraversalForwardsAndBackwards\0"
    "SiblingTraversal\0LeafTraversalOfSimpleBinaryTree\0"
    "LeafTraversalOfSimpleBinaryTreeFromEndToBegin\0"
    "SortingATreeOfIntegers"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TreeTests[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      19,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  109,    2, 0x08 /* Private */,
       3,    0,  110,    2, 0x08 /* Private */,
       4,    0,  111,    2, 0x08 /* Private */,
       5,    0,  112,    2, 0x08 /* Private */,
       6,    0,  113,    2, 0x08 /* Private */,
       7,    0,  114,    2, 0x08 /* Private */,
       8,    0,  115,    2, 0x08 /* Private */,
       9,    0,  116,    2, 0x08 /* Private */,
      10,    0,  117,    2, 0x08 /* Private */,
      11,    0,  118,    2, 0x08 /* Private */,
      12,    0,  119,    2, 0x08 /* Private */,
      13,    0,  120,    2, 0x08 /* Private */,
      14,    0,  121,    2, 0x08 /* Private */,
      15,    0,  122,    2, 0x08 /* Private */,
      16,    0,  123,    2, 0x08 /* Private */,
      17,    0,  124,    2, 0x08 /* Private */,
      18,    0,  125,    2, 0x08 /* Private */,
      19,    0,  126,    2, 0x08 /* Private */,
      20,    0,  127,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TreeTests::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TreeTests *_t = static_cast<TreeTests *>(_o);
        switch (_id) {
        case 0: _t->IntegerTreeCreation(); break;
        case 1: _t->StringTreeCreation(); break;
        case 2: _t->TreeSize(); break;
        case 3: _t->SubTreeSize(); break;
        case 4: _t->GetFirstChild(); break;
        case 5: _t->GetLastChild(); break;
        case 6: _t->CountLeafNodes(); break;
        case 7: _t->PreOrderTraversalOfSimpleBinaryTree(); break;
        case 8: _t->PreOrderTraversalOfSimpleBinaryTreeFromEndToBegin(); break;
        case 9: _t->PostOrderTraversalOfSimpleBinaryTree(); break;
        case 10: _t->PostOrderTraversalOfLeftDegenerateBinaryTree(); break;
        case 11: _t->PostOrderTraversalOfRightDegenerateBinaryTree(); break;
        case 12: _t->PostOrderTraversalFromEndToBegin(); break;
        case 13: _t->ReversePostOrderTraversalOfSimpleBinaryTree(); break;
        case 14: _t->PostOrderTraversalForwardsAndBackwards(); break;
        case 15: _t->SiblingTraversal(); break;
        case 16: _t->LeafTraversalOfSimpleBinaryTree(); break;
        case 17: _t->LeafTraversalOfSimpleBinaryTreeFromEndToBegin(); break;
        case 18: _t->SortingATreeOfIntegers(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TreeTests::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TreeTests.data,
      qt_meta_data_TreeTests,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *TreeTests::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TreeTests::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_TreeTests.stringdata))
        return static_cast<void*>(const_cast< TreeTests*>(this));
    return QObject::qt_metacast(_clname);
}

int TreeTests::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 19)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 19;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 19)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 19;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
